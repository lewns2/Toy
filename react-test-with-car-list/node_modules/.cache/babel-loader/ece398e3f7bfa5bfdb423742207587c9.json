{"ast":null,"code":"var _jsxFileName = \"/Users/donghyun/Desktop/lewns2/src/components/Modal.jsx\";\nimport styled from '@emotion/styled';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ModalContainer = styled.div``;\n_c = ModalContainer;\nconst Dim = styled.div`\n  overflow: hidden;\n  position: fixed;\n\n  justify-content: center;\n  align-items: center;\n\n  top: 0;\n  left: 0;\n\n  width: 100%;\n  height: 100%;\n\n  background-color: rgba(0, 0, 0, 0.6);\n`;\n_c2 = Dim;\nconst ModalBlock = styled.div`\n  overflow: auto;\n  position: fixed;\n\n  z-index: 9999;\n  opacity: 1;\n\n  width: 80%;\n  height: 80%;\n\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n\n  background-color: white;\n`;\n_c3 = ModalBlock;\nconst Close = styled.div`\n  margin: 30px 30px 0 0;\n  display: flex;\n  justify-content: end;\n`;\n/* 클릭 이벤트를 통해 자식의 갯수가 1일 경우, Dim 영역을 선택했다고 판단 \n   영역 내부 클릭 시, Close(X)버튼과 내용들로 인해 수많은 자식들이 존재할 것이기 때문에 */\n\n_c4 = Close;\n\nconst handleClose = (e, setShowModal) => {\n  if (e.target.children.length === 1) {\n    setShowModal(0);\n  }\n};\n/* showModal의 True/False(1/0)에 따라 모달의 표시 여부 */\n\n\nconst Modal = _ref => {\n  let {\n    showModal,\n    setShowModal,\n    children\n  } = _ref;\n  return /*#__PURE__*/_jsxDEV(ModalContainer, {\n    children: /*#__PURE__*/_jsxDEV(Dim, {\n      \"data-testid\": \"modal-container\",\n      style: {\n        display: showModal ? 'flex' : 'none'\n      },\n      onClick: e => handleClose(e, setShowModal),\n      children: /*#__PURE__*/_jsxDEV(ModalBlock, {\n        children: [/*#__PURE__*/_jsxDEV(Close, {\n          \"data-testid\": \"close-modal-button\",\n          onClick: () => setShowModal(0),\n          children: \"X\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 11\n        }, this), children]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 55,\n    columnNumber: 5\n  }, this);\n};\n\n_c5 = Modal;\nexport default Modal;\n\nvar _c, _c2, _c3, _c4, _c5;\n\n$RefreshReg$(_c, \"ModalContainer\");\n$RefreshReg$(_c2, \"Dim\");\n$RefreshReg$(_c3, \"ModalBlock\");\n$RefreshReg$(_c4, \"Close\");\n$RefreshReg$(_c5, \"Modal\");","map":{"version":3,"names":["styled","ModalContainer","div","Dim","ModalBlock","Close","handleClose","e","setShowModal","target","children","length","Modal","showModal","display"],"sources":["/Users/donghyun/Desktop/lewns2/src/components/Modal.jsx"],"sourcesContent":["import styled from '@emotion/styled';\n\nconst ModalContainer = styled.div``;\n\nconst Dim = styled.div`\n  overflow: hidden;\n  position: fixed;\n\n  justify-content: center;\n  align-items: center;\n\n  top: 0;\n  left: 0;\n\n  width: 100%;\n  height: 100%;\n\n  background-color: rgba(0, 0, 0, 0.6);\n`;\n\nconst ModalBlock = styled.div`\n  overflow: auto;\n  position: fixed;\n\n  z-index: 9999;\n  opacity: 1;\n\n  width: 80%;\n  height: 80%;\n\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n\n  background-color: white;\n`;\n\nconst Close = styled.div`\n  margin: 30px 30px 0 0;\n  display: flex;\n  justify-content: end;\n`;\n\n/* 클릭 이벤트를 통해 자식의 갯수가 1일 경우, Dim 영역을 선택했다고 판단 \n   영역 내부 클릭 시, Close(X)버튼과 내용들로 인해 수많은 자식들이 존재할 것이기 때문에 */\nconst handleClose = (e, setShowModal) => {\n  if (e.target.children.length === 1) {\n    setShowModal(0);\n  }\n};\n\n/* showModal의 True/False(1/0)에 따라 모달의 표시 여부 */\nconst Modal = ({ showModal, setShowModal, children }) => {\n  return (\n    <ModalContainer>\n      <Dim\n        data-testid=\"modal-container\"\n        style={{ display: showModal ? 'flex' : 'none' }}\n        onClick={(e) => handleClose(e, setShowModal)}>\n        <ModalBlock>\n          <Close data-testid=\"close-modal-button\" onClick={() => setShowModal(0)}>\n            X\n          </Close>\n          {children}\n        </ModalBlock>\n      </Dim>\n    </ModalContainer>\n  );\n};\n\nexport default Modal;\n"],"mappings":";AAAA,OAAOA,MAAP,MAAmB,iBAAnB;;AAEA,MAAMC,cAAc,GAAGD,MAAM,CAACE,GAAI,EAAlC;KAAMD,c;AAEN,MAAME,GAAG,GAAGH,MAAM,CAACE,GAAI;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAdA;MAAMC,G;AAgBN,MAAMC,UAAU,GAAGJ,MAAM,CAACE,GAAI;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAfA;MAAME,U;AAiBN,MAAMC,KAAK,GAAGL,MAAM,CAACE,GAAI;AACzB;AACA;AACA;AACA,CAJA;AAMA;AACA;;MAPMG,K;;AAQN,MAAMC,WAAW,GAAG,CAACC,CAAD,EAAIC,YAAJ,KAAqB;EACvC,IAAID,CAAC,CAACE,MAAF,CAASC,QAAT,CAAkBC,MAAlB,KAA6B,CAAjC,EAAoC;IAClCH,YAAY,CAAC,CAAD,CAAZ;EACD;AACF,CAJD;AAMA;;;AACA,MAAMI,KAAK,GAAG,QAA2C;EAAA,IAA1C;IAAEC,SAAF;IAAaL,YAAb;IAA2BE;EAA3B,CAA0C;EACvD,oBACE,QAAC,cAAD;IAAA,uBACE,QAAC,GAAD;MACE,eAAY,iBADd;MAEE,KAAK,EAAE;QAAEI,OAAO,EAAED,SAAS,GAAG,MAAH,GAAY;MAAhC,CAFT;MAGE,OAAO,EAAGN,CAAD,IAAOD,WAAW,CAACC,CAAD,EAAIC,YAAJ,CAH7B;MAAA,uBAIE,QAAC,UAAD;QAAA,wBACE,QAAC,KAAD;UAAO,eAAY,oBAAnB;UAAwC,OAAO,EAAE,MAAMA,YAAY,CAAC,CAAD,CAAnE;UAAA;QAAA;UAAA;UAAA;UAAA;QAAA,QADF,EAIGE,QAJH;MAAA;QAAA;QAAA;QAAA;MAAA;IAJF;MAAA;MAAA;MAAA;IAAA;EADF;IAAA;IAAA;IAAA;EAAA,QADF;AAeD,CAhBD;;MAAME,K;AAkBN,eAAeA,KAAf"},"metadata":{},"sourceType":"module"}