{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n    label: 0,\n    sent: function () {\n      if (t[0] & 1) throw t[1];\n      return t[1];\n    },\n    trys: [],\n    ops: []\n  },\n      f,\n      y,\n      t,\n      g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n\n        case 7:\n          op = _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n\n            _.ops.push(op);\n\n            break;\n          }\n\n          if (t[2]) _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n      }\n\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createLazyCallback = void 0;\n\nfunction createLazyCallback(options) {\n  var _this = this;\n\n  if (options === void 0) {\n    options = {};\n  }\n\n  var calledTimes = 0;\n  var autoResolveTimeout;\n  var remoteResolve;\n  var callPromise = new Promise(function (resolve) {\n    remoteResolve = resolve;\n  }).finally(function () {\n    clearTimeout(autoResolveTimeout);\n  });\n\n  var fn = function () {\n    var _a;\n\n    var args = [];\n\n    for (var _i = 0; _i < arguments.length; _i++) {\n      args[_i] = arguments[_i];\n    }\n\n    if (options.maxCalls && calledTimes >= options.maxCalls) {\n      (_a = options.maxCallsCallback) === null || _a === void 0 ? void 0 : _a.call(options);\n    }\n\n    remoteResolve(args);\n    calledTimes++;\n  };\n\n  fn.invoked = function () {\n    return __awaiter(_this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        // Immediately resolve the callback if it hasn't been called already.\n        autoResolveTimeout = setTimeout(function () {\n          remoteResolve([]);\n        }, 0);\n        return [2\n        /*return*/\n        , callPromise];\n      });\n    });\n  };\n\n  return fn;\n}\n\nexports.createLazyCallback = createLazyCallback;","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgBA,SAAgBA,kBAAhB,CACEC,OADF,EACmC;EADnC;;EACE;IAAAA;EAAiC;;EAEjC,IAAIC,WAAW,GAAG,CAAlB;EACA,IAAIC,kBAAJ;EACA,IAAIC,aAAJ;EAEA,IAAMC,WAAW,GAAG,IAAIC,OAAJ,CAA4C,UAACC,OAAD,EAAQ;IACtEH,aAAa,GAAGG,OAAhB;EACD,CAFmB,EAEjBC,OAFiB,CAET;IACTC,YAAY,CAACN,kBAAD,CAAZ;EACD,CAJmB,CAApB;;EAMA,IAAMO,EAAE,GAAyB;;;IAAU;;SAAA,yCAAO;MAAPC;;;IACzC,IAAIV,OAAO,CAACW,QAAR,IAAoBV,WAAW,IAAID,OAAO,CAACW,QAA/C,EAAyD;MACvD,aAAO,CAACC,gBAAR,MAAwB,IAAxB,IAAwBC,aAAxB,GAAwB,MAAxB,GAAwBA,QAAxBb,OAAwB,CAAxB;IACD;;IAEDG,aAAa,CAACO,IAAD,CAAb;IACAT,WAAW;EACZ,CAPD;;EASAQ,EAAE,CAACK,OAAH,GAAa;IAAA;;QACX;QACAZ,kBAAkB,GAAGa,UAAU,CAAC;UAC9BZ,aAAa,CAAC,EAAD,CAAb;QACD,CAF8B,EAE5B,CAF4B,CAA/B;QAIA;QAAA;QAAA,EAAOC,WAAP;;KANW;EAOZ,CAPD;;EASA,OAAOK,EAAP;AACD;;AAhCDO","names":["createLazyCallback","options","calledTimes","autoResolveTimeout","remoteResolve","callPromise","Promise","resolve","finally","clearTimeout","fn","args","maxCalls","maxCallsCallback","_a","invoked","setTimeout","exports"],"sources":["/Users/donghyun/Desktop/lewns2/node_modules/@mswjs/interceptors/src/utils/createLazyCallback.ts"],"sourcesContent":["export type AnyFunction = (...args: any[]) => any\n\nexport type LazyCallbackReturnType<FnType extends AnyFunction> =\n  | Parameters<FnType>\n  | []\n\nexport interface LazyCallback<FnType extends AnyFunction> {\n  (...args: Parameters<FnType>): void\n  invoked(): Promise<LazyCallbackReturnType<FnType>>\n}\n\nexport interface LazyCallbackOptions {\n  maxCalls?: number\n  maxCallsCallback?(): void\n}\n\nexport function createLazyCallback<FnType extends AnyFunction>(\n  options: LazyCallbackOptions = {}\n): LazyCallback<FnType> {\n  let calledTimes = 0\n  let autoResolveTimeout: NodeJS.Timeout\n  let remoteResolve: (args: LazyCallbackReturnType<FnType>) => unknown\n\n  const callPromise = new Promise<LazyCallbackReturnType<FnType>>((resolve) => {\n    remoteResolve = resolve\n  }).finally(() => {\n    clearTimeout(autoResolveTimeout)\n  })\n\n  const fn: LazyCallback<FnType> = function (...args) {\n    if (options.maxCalls && calledTimes >= options.maxCalls) {\n      options.maxCallsCallback?.()\n    }\n\n    remoteResolve(args)\n    calledTimes++\n  }\n\n  fn.invoked = async () => {\n    // Immediately resolve the callback if it hasn't been called already.\n    autoResolveTimeout = setTimeout(() => {\n      remoteResolve([])\n    }, 0)\n\n    return callPromise\n  }\n\n  return fn\n}\n"]},"metadata":{},"sourceType":"script"}