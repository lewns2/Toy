{"ast":null,"code":"\"use strict\";\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n    label: 0,\n    sent: function () {\n      if (t[0] & 1) throw t[1];\n      return t[1];\n    },\n    trys: [],\n    ops: []\n  },\n      f,\n      y,\n      t,\n      g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n\n        case 7:\n          op = _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n\n            _.ops.push(op);\n\n            break;\n          }\n\n          if (t[2]) _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n      }\n\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\n\nvar __values = this && this.__values || function (o) {\n  var s = typeof Symbol === \"function\" && Symbol.iterator,\n      m = s && o[s],\n      i = 0;\n  if (m) return m.call(o);\n  if (o && typeof o.length === \"number\") return {\n    next: function () {\n      if (o && i >= o.length) o = void 0;\n      return {\n        value: o && o[i++],\n        done: !o\n      };\n    }\n  };\n  throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n};\n\nvar __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n      r,\n      ar = [],\n      e;\n\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n\n  return ar;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createXMLHttpRequestOverride = void 0;\n\nvar until_1 = require(\"@open-draft/until\");\n\nvar headers_polyfill_1 = require(\"headers-polyfill\");\n\nvar xmldom_1 = require(\"@xmldom/xmldom\");\n\nvar parseJson_1 = require(\"../../utils/parseJson\");\n\nvar toIsoResponse_1 = require(\"../../utils/toIsoResponse\");\n\nvar uuid_1 = require(\"../../utils/uuid\");\n\nvar bufferFrom_1 = require(\"./utils/bufferFrom\");\n\nvar createEvent_1 = require(\"./utils/createEvent\");\n\nvar createLazyCallback_1 = require(\"../../utils/createLazyCallback\");\n\nvar createXMLHttpRequestOverride = function (options) {\n  var _a;\n\n  var XMLHttpRequest = options.XMLHttpRequest,\n      emitter = options.emitter,\n      log = options.log;\n  return _a =\n  /** @class */\n  function () {\n    function XMLHttpRequestOverride() {\n      // Collection of events modified by `addEventListener`/`removeEventListener` calls.\n      this._events = [];\n      this.log = log;\n      this.UNSENT = 0;\n      this.OPENED = 1;\n      this.HEADERS_RECEIVED = 2;\n      this.LOADING = 3;\n      this.DONE = 4;\n      this.onreadystatechange = null;\n      /* Events */\n\n      this.onabort = null;\n      this.onerror = null;\n      this.onload = null;\n      this.onloadend = null;\n      this.onloadstart = null;\n      this.onprogress = null;\n      this.ontimeout = null;\n      this.url = '';\n      this.method = 'GET';\n      this.readyState = this.UNSENT;\n      this.withCredentials = false;\n      this.status = 200;\n      this.statusText = 'OK';\n      this.data = '';\n      this.response = '';\n      this.responseType = 'text';\n      this.responseText = '';\n      this.responseXML = null;\n      this.responseURL = '';\n      this.upload = {};\n      this.timeout = 0;\n      this._requestHeaders = new headers_polyfill_1.Headers();\n      this._responseHeaders = new headers_polyfill_1.Headers();\n    }\n\n    XMLHttpRequestOverride.prototype.setReadyState = function (nextState) {\n      if (nextState === this.readyState) {\n        return;\n      }\n\n      this.log('readyState change %d -> %d', this.readyState, nextState);\n      this.readyState = nextState;\n\n      if (nextState !== this.UNSENT) {\n        this.log('triggerring readystate change...');\n        this.trigger('readystatechange');\n      }\n    };\n    /**\n     * Triggers both direct callback and attached event listeners\n     * for the given event.\n     */\n\n\n    XMLHttpRequestOverride.prototype.trigger = function (eventName, options) {\n      var e_1, _a;\n\n      this.log('trigger \"%s\" (%d)', eventName, this.readyState);\n      this.log('resolve listener for event \"%s\"', eventName); // @ts-expect-error XMLHttpRequest class has no index signature.\n\n      var callback = this[\"on\" + eventName];\n      callback === null || callback === void 0 ? void 0 : callback.call(this, createEvent_1.createEvent(this, eventName, options));\n\n      try {\n        for (var _b = __values(this._events), _c = _b.next(); !_c.done; _c = _b.next()) {\n          var event_1 = _c.value;\n\n          if (event_1.name === eventName) {\n            log('calling mock event listener \"%s\" (%d)', eventName, this.readyState);\n            event_1.listener.call(this, createEvent_1.createEvent(this, eventName, options));\n          }\n        }\n      } catch (e_1_1) {\n        e_1 = {\n          error: e_1_1\n        };\n      } finally {\n        try {\n          if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n        } finally {\n          if (e_1) throw e_1.error;\n        }\n      }\n\n      return this;\n    };\n\n    XMLHttpRequestOverride.prototype.reset = function () {\n      this.log('reset');\n      this.setReadyState(this.UNSENT);\n      this.status = 200;\n      this.statusText = 'OK';\n      this.data = '';\n      this.response = null;\n      this.responseText = null;\n      this.responseXML = null;\n      this._requestHeaders = new headers_polyfill_1.Headers();\n      this._responseHeaders = new headers_polyfill_1.Headers();\n    };\n\n    XMLHttpRequestOverride.prototype.open = function (method, url, async, user, password) {\n      if (async === void 0) {\n        async = true;\n      }\n\n      return __awaiter(this, void 0, void 0, function () {\n        return __generator(this, function (_a) {\n          this.log = this.log.extend(\"request \" + method + \" \" + url);\n          this.log('open', {\n            method: method,\n            url: url,\n            async: async,\n            user: user,\n            password: password\n          });\n          this.reset();\n          this.setReadyState(this.OPENED);\n\n          if (typeof url === 'undefined') {\n            this.url = method;\n            this.method = 'GET';\n          } else {\n            this.url = url;\n            this.method = method;\n            this.async = async;\n            this.user = user;\n            this.password = password;\n          }\n\n          return [2\n          /*return*/\n          ];\n        });\n      });\n    };\n\n    XMLHttpRequestOverride.prototype.send = function (data) {\n      var _this = this;\n\n      this.log('send %s %s', this.method, this.url);\n      this.data = data || '';\n      var url;\n\n      try {\n        url = new URL(this.url);\n      } catch (error) {\n        // Assume a relative URL, if construction of a new `URL` instance fails.\n        // Since `XMLHttpRequest` always executed in a DOM-like environment,\n        // resolve the relative request URL against the current window location.\n        url = new URL(this.url, window.location.href);\n      }\n\n      this.log('request headers', this._requestHeaders); // Create an intercepted request instance exposed to the request intercepting middleware.\n\n      var isomorphicRequest = {\n        id: uuid_1.uuidv4(),\n        url: url,\n        method: this.method,\n        headers: this._requestHeaders,\n        credentials: this.withCredentials ? 'include' : 'omit',\n        body: this.data\n      };\n\n      var interactiveIsomorphicRequest = __assign(__assign({}, isomorphicRequest), {\n        respondWith: createLazyCallback_1.createLazyCallback()\n      });\n\n      this.log('emitting the \"request\" event for %d listener(s)...', emitter.listenerCount('request'));\n      emitter.emit('request', interactiveIsomorphicRequest);\n      this.log('awaiting mocked response...');\n      Promise.resolve(until_1.until(function () {\n        return __awaiter(_this, void 0, void 0, function () {\n          var _a, mockedResponse;\n\n          return __generator(this, function (_b) {\n            switch (_b.label) {\n              case 0:\n                return [4\n                /*yield*/\n                , emitter.untilIdle('request', function (_a) {\n                  var _b = __read(_a.args, 1),\n                      request = _b[0];\n\n                  return request.id === interactiveIsomorphicRequest.id;\n                })];\n\n              case 1:\n                _b.sent();\n\n                this.log('all request listeners have been resolved!');\n                return [4\n                /*yield*/\n                , interactiveIsomorphicRequest.respondWith.invoked()];\n\n              case 2:\n                _a = __read.apply(void 0, [_b.sent(), 1]), mockedResponse = _a[0];\n                this.log('event.respondWith called with:', mockedResponse);\n                return [2\n                /*return*/\n                , mockedResponse];\n            }\n          });\n        });\n      })).then(function (_a) {\n        var _b;\n\n        var _c = __read(_a, 2),\n            middlewareException = _c[0],\n            mockedResponse = _c[1]; // When the request middleware throws an exception, error the request.\n        // This cancels the request and is similar to a network error.\n\n\n        if (middlewareException) {\n          _this.log('middleware function threw an exception!', middlewareException); // No way to propagate the actual error message.\n\n\n          _this.trigger('error');\n\n          _this.abort();\n\n          return;\n        } // Return a mocked response, if provided in the middleware.\n\n\n        if (mockedResponse) {\n          _this.log('received mocked response', mockedResponse); // Trigger a loadstart event to indicate the initialization of the fetch.\n\n\n          _this.trigger('loadstart');\n\n          _this.status = mockedResponse.status || 200;\n          _this.statusText = mockedResponse.statusText || 'OK';\n          _this._responseHeaders = mockedResponse.headers ? headers_polyfill_1.objectToHeaders(mockedResponse.headers) : new headers_polyfill_1.Headers();\n\n          _this.log('set response status', _this.status, _this.statusText);\n\n          _this.log('set response headers', _this._responseHeaders); // Mark that response headers has been received\n          // and trigger a ready state event to reflect received headers\n          // in a custom `onreadystatechange` callback.\n\n\n          _this.setReadyState(_this.HEADERS_RECEIVED);\n\n          _this.log('response type', _this.responseType);\n\n          _this.response = _this.getResponseBody(mockedResponse.body);\n          _this.responseURL = _this.url;\n          _this.responseText = mockedResponse.body || '';\n          _this.responseXML = _this.getResponseXML();\n\n          _this.log('set response body', _this.response);\n\n          if (mockedResponse.body && _this.response) {\n            _this.setReadyState(_this.LOADING); // Presense of the mocked response implies a response body (not null).\n            // Presense of the coerced `this.response` implies the mocked body is valid.\n\n\n            var bodyBuffer = bufferFrom_1.bufferFrom(mockedResponse.body); // Trigger a progress event based on the mocked response body.\n\n            _this.trigger('progress', {\n              loaded: bodyBuffer.length,\n              total: bodyBuffer.length\n            });\n          }\n          /**\n           * Explicitly mark the request as done so its response never hangs.\n           * @see https://github.com/mswjs/interceptors/issues/13\n           */\n\n\n          _this.setReadyState(_this.DONE); // Trigger a load event to indicate the fetch has succeeded.\n\n\n          _this.trigger('load'); // Trigger a loadend event to indicate the fetch has completed.\n\n\n          _this.trigger('loadend');\n\n          emitter.emit('response', isomorphicRequest, toIsoResponse_1.toIsoResponse(mockedResponse));\n        } else {\n          _this.log('no mocked response received!'); // Perform an original request, when the request middleware returned no mocked response.\n\n\n          var originalRequest_1 = new XMLHttpRequest();\n\n          _this.log('opening an original request %s %s', _this.method, _this.url);\n\n          originalRequest_1.open(_this.method, _this.url, (_b = _this.async) !== null && _b !== void 0 ? _b : true, _this.user, _this.password); // Reflect a successful state of the original request\n          // on the patched instance.\n\n          originalRequest_1.addEventListener('load', function () {\n            _this.log('original \"onload\"');\n\n            _this.status = originalRequest_1.status;\n            _this.statusText = originalRequest_1.statusText;\n            _this.responseURL = originalRequest_1.responseURL;\n            _this.responseType = originalRequest_1.responseType;\n            _this.response = originalRequest_1.response;\n            _this.responseText = originalRequest_1.responseText;\n            _this.responseXML = originalRequest_1.responseXML;\n\n            _this.log('set mock request readyState to DONE'); // Explicitly mark the mocked request instance as done\n            // so the response never hangs.\n\n            /**\n             * @note `readystatechange` listener is called TWICE\n             * in the case of unhandled request.\n             */\n\n\n            _this.setReadyState(_this.DONE);\n\n            _this.log('received original response', _this.status, _this.statusText);\n\n            _this.log('original response body:', _this.response);\n\n            var responseHeaders = originalRequest_1.getAllResponseHeaders();\n\n            _this.log('original response headers:\\n', responseHeaders);\n\n            _this._responseHeaders = headers_polyfill_1.stringToHeaders(responseHeaders);\n\n            _this.log('original response headers (normalized)', _this._responseHeaders);\n\n            _this.log('original response finished');\n\n            emitter.emit('response', isomorphicRequest, {\n              status: originalRequest_1.status,\n              statusText: originalRequest_1.statusText,\n              headers: _this._responseHeaders,\n              body: originalRequest_1.response\n            });\n          }); // Assign callbacks and event listeners from the intercepted XHR instance\n          // to the original XHR instance.\n\n          _this.propagateCallbacks(originalRequest_1);\n\n          _this.propagateListeners(originalRequest_1);\n\n          _this.propagateHeaders(originalRequest_1, _this._requestHeaders);\n\n          if (_this.async) {\n            originalRequest_1.timeout = _this.timeout;\n          }\n\n          _this.log('send', _this.data);\n\n          originalRequest_1.send(_this.data);\n        }\n      });\n    };\n\n    XMLHttpRequestOverride.prototype.abort = function () {\n      this.log('abort');\n\n      if (this.readyState > this.UNSENT && this.readyState < this.DONE) {\n        this.setReadyState(this.UNSENT);\n        this.trigger('abort');\n      }\n    };\n\n    XMLHttpRequestOverride.prototype.dispatchEvent = function () {\n      return false;\n    };\n\n    XMLHttpRequestOverride.prototype.setRequestHeader = function (name, value) {\n      this.log('set request header \"%s\" to \"%s\"', name, value);\n\n      this._requestHeaders.append(name, value);\n    };\n\n    XMLHttpRequestOverride.prototype.getResponseHeader = function (name) {\n      this.log('get response header \"%s\"', name);\n\n      if (this.readyState < this.HEADERS_RECEIVED) {\n        this.log('cannot return a header: headers not received (state: %s)', this.readyState);\n        return null;\n      }\n\n      var headerValue = this._responseHeaders.get(name);\n\n      this.log('resolved response header \"%s\" to \"%s\"', name, headerValue, this._responseHeaders);\n      return headerValue;\n    };\n\n    XMLHttpRequestOverride.prototype.getAllResponseHeaders = function () {\n      this.log('get all response headers');\n\n      if (this.readyState < this.HEADERS_RECEIVED) {\n        this.log('cannot return headers: headers not received (state: %s)', this.readyState);\n        return '';\n      }\n\n      return headers_polyfill_1.headersToString(this._responseHeaders);\n    };\n\n    XMLHttpRequestOverride.prototype.addEventListener = function (name, listener) {\n      this.log('addEventListener', name, listener);\n\n      this._events.push({\n        name: name,\n        listener: listener\n      });\n    };\n\n    XMLHttpRequestOverride.prototype.removeEventListener = function (name, listener) {\n      this.log('removeEventListener', name, listener);\n      this._events = this._events.filter(function (storedEvent) {\n        return storedEvent.name !== name && storedEvent.listener !== listener;\n      });\n    };\n\n    XMLHttpRequestOverride.prototype.overrideMimeType = function () {};\n    /**\n     * Resolves the response based on the `responseType` value.\n     */\n\n\n    XMLHttpRequestOverride.prototype.getResponseBody = function (body) {\n      // Handle an improperly set \"null\" value of the mocked response body.\n      var textBody = body !== null && body !== void 0 ? body : '';\n      this.log('coerced response body to', textBody);\n\n      switch (this.responseType) {\n        case 'json':\n          {\n            this.log('resolving response body as JSON');\n            return parseJson_1.parseJson(textBody);\n          }\n\n        case 'blob':\n          {\n            var blobType = this.getResponseHeader('content-type') || 'text/plain';\n            this.log('resolving response body as Blob', {\n              type: blobType\n            });\n            return new Blob([textBody], {\n              type: blobType\n            });\n          }\n\n        case 'arraybuffer':\n          {\n            this.log('resolving response body as ArrayBuffer');\n            var arrayBuffer = bufferFrom_1.bufferFrom(textBody);\n            return arrayBuffer;\n          }\n\n        default:\n          return textBody;\n      }\n    };\n\n    XMLHttpRequestOverride.prototype.getResponseXML = function () {\n      var contentType = this.getResponseHeader('Content-Type');\n\n      if (contentType === 'application/xml' || contentType === 'text/xml') {\n        return new xmldom_1.DOMParser().parseFromString(this.responseText, contentType);\n      }\n\n      return null;\n    };\n    /**\n     * Propagates mock XMLHttpRequest instance callbacks\n     * to the given XMLHttpRequest instance.\n     */\n\n\n    XMLHttpRequestOverride.prototype.propagateCallbacks = function (request) {\n      var e_2, _a;\n\n      this.log('propagating request callbacks to the original request');\n      var callbackNames = ['abort', 'onerror', 'ontimeout', 'onload', 'onloadstart', 'onloadend', 'onprogress', 'onreadystatechange'];\n\n      try {\n        for (var callbackNames_1 = __values(callbackNames), callbackNames_1_1 = callbackNames_1.next(); !callbackNames_1_1.done; callbackNames_1_1 = callbackNames_1.next()) {\n          var callbackName = callbackNames_1_1.value;\n          var callback = this[callbackName];\n\n          if (callback) {\n            request[callbackName] = this[callbackName];\n            this.log('propagated the \"%s\" callback', callbackName, callback);\n          }\n        }\n      } catch (e_2_1) {\n        e_2 = {\n          error: e_2_1\n        };\n      } finally {\n        try {\n          if (callbackNames_1_1 && !callbackNames_1_1.done && (_a = callbackNames_1.return)) _a.call(callbackNames_1);\n        } finally {\n          if (e_2) throw e_2.error;\n        }\n      }\n\n      request.onabort = this.abort;\n      request.onerror = this.onerror;\n      request.ontimeout = this.ontimeout;\n      request.onload = this.onload;\n      request.onloadstart = this.onloadstart;\n      request.onloadend = this.onloadend;\n      request.onprogress = this.onprogress;\n      request.onreadystatechange = this.onreadystatechange;\n    };\n    /**\n     * Propagates the mock XMLHttpRequest instance listeners\n     * to the given XMLHttpRequest instance.\n     */\n\n\n    XMLHttpRequestOverride.prototype.propagateListeners = function (request) {\n      this.log('propagating request listeners (%d) to the original request', this._events.length, this._events);\n\n      this._events.forEach(function (_a) {\n        var name = _a.name,\n            listener = _a.listener;\n        request.addEventListener(name, listener);\n      });\n    };\n\n    XMLHttpRequestOverride.prototype.propagateHeaders = function (request, headers) {\n      var _this = this;\n\n      this.log('propagating request headers to the original request', headers); // Preserve the request headers casing.\n\n      Object.entries(headers.raw()).forEach(function (_a) {\n        var _b = __read(_a, 2),\n            name = _b[0],\n            value = _b[1];\n\n        _this.log('setting \"%s\" (%s) header on the original request', name, value);\n\n        request.setRequestHeader(name, value);\n      });\n    };\n\n    return XMLHttpRequestOverride;\n  }(),\n  /* Request state */\n  _a.UNSENT = 0, _a.OPENED = 1, _a.HEADERS_RECEIVED = 2, _a.LOADING = 3, _a.DONE = 4, _a;\n};\n\nexports.createXMLHttpRequestOverride = createXMLHttpRequestOverride;","map":{"version":3,"mappings":"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","names":["createXMLHttpRequestOverride","options","emitter","log","url","method","readyState","UNSENT","withCredentials","status","statusText","data","response","responseType","responseText","responseXML","responseURL","upload","timeout","_requestHeaders","headers_polyfill_1","_responseHeaders","XMLHttpRequestOverride","nextState","trigger","eventName","callback","call","createEvent_1","_events","_c","event_1","name","listener","setReadyState","async","user","password","extend","reset","OPENED","URL","error","window","location","href","isomorphicRequest","id","uuid_1","headers","credentials","body","interactiveIsomorphicRequest","respondWith","createLazyCallback_1","listenerCount","emit","Promise","resolve","until_1","untilIdle","_a","_b","request","invoked","mockedResponse","then","middlewareException","_this","abort","HEADERS_RECEIVED","getResponseBody","getResponseXML","LOADING","bodyBuffer","bufferFrom_1","loaded","length","total","DONE","toIsoResponse_1","originalRequest_1","XMLHttpRequest","open","addEventListener","responseHeaders","getAllResponseHeaders","propagateCallbacks","propagateListeners","propagateHeaders","send","value","append","headerValue","get","push","filter","storedEvent","textBody","parseJson_1","blobType","getResponseHeader","type","Blob","arrayBuffer","contentType","xmldom_1","parseFromString","callbackNames","callbackNames_1_1","callbackName","onabort","onerror","ontimeout","onload","onloadstart","onloadend","onprogress","onreadystatechange","forEach","Object","entries","raw","setRequestHeader","exports"],"sources":["/Users/donghyun/Desktop/lewns2/node_modules/@mswjs/interceptors/src/interceptors/XMLHttpRequest/XMLHttpRequestOverride.ts"],"sourcesContent":["/**\n * XMLHttpRequest override class.\n * Inspired by https://github.com/marvinhagemeister/xhr-mocklet.\n */\nimport type { Debugger } from 'debug'\nimport { until } from '@open-draft/until'\nimport {\n  Headers,\n  stringToHeaders,\n  objectToHeaders,\n  headersToString,\n} from 'headers-polyfill'\nimport { DOMParser } from '@xmldom/xmldom'\nimport { InteractiveIsomorphicRequest, IsomorphicRequest } from '../../glossary'\nimport { parseJson } from '../../utils/parseJson'\nimport { toIsoResponse } from '../../utils/toIsoResponse'\nimport { uuidv4 } from '../../utils/uuid'\nimport { bufferFrom } from './utils/bufferFrom'\nimport { createEvent } from './utils/createEvent'\nimport type { XMLHttpRequestEmitter } from '.'\nimport { createLazyCallback } from '../../utils/createLazyCallback'\n\ntype XMLHttpRequestEventHandler = (\n  this: XMLHttpRequest,\n  event: Event | ProgressEvent<any>\n) => void\n\ninterface XMLHttpRequestEvent<EventMap extends any> {\n  name: keyof EventMap\n  listener: XMLHttpRequestEventHandler\n}\n\ninterface CreateXMLHttpRequestOverrideOptions {\n  XMLHttpRequest: typeof window.XMLHttpRequest\n  emitter: XMLHttpRequestEmitter\n  log: Debugger\n}\n\ninterface InternalXMLHttpRequestEventTargetEventMap\n  extends XMLHttpRequestEventTargetEventMap {\n  readystatechange: Event\n}\n\nexport type ExtractCallbacks<Key extends string> = Key extends\n  | 'abort'\n  | `on${infer _CallbackName}`\n  ? Key\n  : never\n\nexport const createXMLHttpRequestOverride = (\n  options: CreateXMLHttpRequestOverrideOptions\n) => {\n  const { XMLHttpRequest, emitter, log } = options\n\n  return class XMLHttpRequestOverride implements XMLHttpRequest {\n    _requestHeaders: Headers\n    _responseHeaders: Headers\n\n    // Collection of events modified by `addEventListener`/`removeEventListener` calls.\n    _events: XMLHttpRequestEvent<InternalXMLHttpRequestEventTargetEventMap>[] =\n      []\n\n    log: Debugger = log\n\n    /* Request state */\n    public static readonly UNSENT = 0\n    public static readonly OPENED = 1\n    public static readonly HEADERS_RECEIVED = 2\n    public static readonly LOADING = 3\n    public static readonly DONE = 4\n    public readonly UNSENT = 0\n    public readonly OPENED = 1\n    public readonly HEADERS_RECEIVED = 2\n    public readonly LOADING = 3\n    public readonly DONE = 4\n\n    /* Custom public properties */\n    public method: string\n    public url: string\n\n    /* XHR public properties */\n    public withCredentials: boolean\n    public status: number\n    public statusText: string\n    public user?: string\n    public password?: string\n    public data: string\n    public async?: boolean\n    public response: any\n    public responseText: string\n    public responseType: XMLHttpRequestResponseType\n    public responseXML: Document | null\n    public responseURL: string\n    public upload: XMLHttpRequestUpload\n    public readyState: number\n    public onreadystatechange: (this: XMLHttpRequest, ev: Event) => any =\n      null as any\n    public timeout: number\n\n    /* Events */\n    public onabort: (\n      this: XMLHttpRequestEventTarget,\n      event: ProgressEvent\n    ) => any = null as any\n    public onerror: (this: XMLHttpRequestEventTarget, event: Event) => any =\n      null as any\n    public onload: (\n      this: XMLHttpRequestEventTarget,\n      event: ProgressEvent\n    ) => any = null as any\n    public onloadend: (\n      this: XMLHttpRequestEventTarget,\n      event: ProgressEvent\n    ) => any = null as any\n    public onloadstart: (\n      this: XMLHttpRequestEventTarget,\n      event: ProgressEvent\n    ) => any = null as any\n    public onprogress: (\n      this: XMLHttpRequestEventTarget,\n      event: ProgressEvent\n    ) => any = null as any\n    public ontimeout: (\n      this: XMLHttpRequestEventTarget,\n      event: ProgressEvent\n    ) => any = null as any\n\n    constructor() {\n      this.url = ''\n      this.method = 'GET'\n      this.readyState = this.UNSENT\n      this.withCredentials = false\n      this.status = 200\n      this.statusText = 'OK'\n      this.data = ''\n      this.response = ''\n      this.responseType = 'text'\n      this.responseText = ''\n      this.responseXML = null\n      this.responseURL = ''\n      this.upload = {} as any\n      this.timeout = 0\n\n      this._requestHeaders = new Headers()\n      this._responseHeaders = new Headers()\n    }\n\n    setReadyState(nextState: number): void {\n      if (nextState === this.readyState) {\n        return\n      }\n\n      this.log('readyState change %d -> %d', this.readyState, nextState)\n      this.readyState = nextState\n\n      if (nextState !== this.UNSENT) {\n        this.log('triggerring readystate change...')\n        this.trigger('readystatechange')\n      }\n    }\n\n    /**\n     * Triggers both direct callback and attached event listeners\n     * for the given event.\n     */\n    trigger<\n      K extends keyof (XMLHttpRequestEventTargetEventMap & {\n        readystatechange: ProgressEvent<XMLHttpRequestEventTarget>\n      })\n    >(eventName: K, options?: ProgressEventInit) {\n      this.log('trigger \"%s\" (%d)', eventName, this.readyState)\n      this.log('resolve listener for event \"%s\"', eventName)\n\n      // @ts-expect-error XMLHttpRequest class has no index signature.\n      const callback = this[`on${eventName}`] as XMLHttpRequestEventHandler\n      callback?.call(this, createEvent(this, eventName, options))\n\n      for (const event of this._events) {\n        if (event.name === eventName) {\n          log(\n            'calling mock event listener \"%s\" (%d)',\n            eventName,\n            this.readyState\n          )\n          event.listener.call(this, createEvent(this, eventName, options))\n        }\n      }\n\n      return this\n    }\n\n    reset() {\n      this.log('reset')\n\n      this.setReadyState(this.UNSENT)\n      this.status = 200\n      this.statusText = 'OK'\n      this.data = ''\n      this.response = null as any\n      this.responseText = null as any\n      this.responseXML = null as any\n\n      this._requestHeaders = new Headers()\n      this._responseHeaders = new Headers()\n    }\n\n    public async open(\n      method: string,\n      url: string,\n      async: boolean = true,\n      user?: string,\n      password?: string\n    ) {\n      this.log = this.log.extend(`request ${method} ${url}`)\n      this.log('open', { method, url, async, user, password })\n\n      this.reset()\n      this.setReadyState(this.OPENED)\n\n      if (typeof url === 'undefined') {\n        this.url = method\n        this.method = 'GET'\n      } else {\n        this.url = url\n        this.method = method\n        this.async = async\n        this.user = user\n        this.password = password\n      }\n    }\n\n    public send(data?: string) {\n      this.log('send %s %s', this.method, this.url)\n\n      this.data = data || ''\n\n      let url: URL\n\n      try {\n        url = new URL(this.url)\n      } catch (error) {\n        // Assume a relative URL, if construction of a new `URL` instance fails.\n        // Since `XMLHttpRequest` always executed in a DOM-like environment,\n        // resolve the relative request URL against the current window location.\n        url = new URL(this.url, window.location.href)\n      }\n\n      this.log('request headers', this._requestHeaders)\n\n      // Create an intercepted request instance exposed to the request intercepting middleware.\n      const isomorphicRequest: IsomorphicRequest = {\n        id: uuidv4(),\n        url,\n        method: this.method,\n        headers: this._requestHeaders,\n        credentials: this.withCredentials ? 'include' : 'omit',\n        body: this.data,\n      }\n\n      const interactiveIsomorphicRequest: InteractiveIsomorphicRequest = {\n        ...isomorphicRequest,\n        respondWith: createLazyCallback(),\n      }\n\n      this.log(\n        'emitting the \"request\" event for %d listener(s)...',\n        emitter.listenerCount('request')\n      )\n      emitter.emit('request', interactiveIsomorphicRequest)\n\n      this.log('awaiting mocked response...')\n\n      Promise.resolve(\n        until(async () => {\n          await emitter.untilIdle('request', ({ args: [request] }) => {\n            return request.id === interactiveIsomorphicRequest.id\n          })\n          this.log('all request listeners have been resolved!')\n\n          const [mockedResponse] =\n            await interactiveIsomorphicRequest.respondWith.invoked()\n          this.log('event.respondWith called with:', mockedResponse)\n\n          return mockedResponse\n        })\n      ).then(([middlewareException, mockedResponse]) => {\n        // When the request middleware throws an exception, error the request.\n        // This cancels the request and is similar to a network error.\n        if (middlewareException) {\n          this.log(\n            'middleware function threw an exception!',\n            middlewareException\n          )\n\n          // No way to propagate the actual error message.\n          this.trigger('error')\n          this.abort()\n\n          return\n        }\n\n        // Return a mocked response, if provided in the middleware.\n        if (mockedResponse) {\n          this.log('received mocked response', mockedResponse)\n\n          // Trigger a loadstart event to indicate the initialization of the fetch.\n          this.trigger('loadstart')\n\n          this.status = mockedResponse.status || 200\n          this.statusText = mockedResponse.statusText || 'OK'\n          this._responseHeaders = mockedResponse.headers\n            ? objectToHeaders(mockedResponse.headers)\n            : new Headers()\n\n          this.log('set response status', this.status, this.statusText)\n          this.log('set response headers', this._responseHeaders)\n\n          // Mark that response headers has been received\n          // and trigger a ready state event to reflect received headers\n          // in a custom `onreadystatechange` callback.\n          this.setReadyState(this.HEADERS_RECEIVED)\n\n          this.log('response type', this.responseType)\n          this.response = this.getResponseBody(mockedResponse.body)\n          this.responseURL = this.url\n          this.responseText = mockedResponse.body || ''\n          this.responseXML = this.getResponseXML()\n\n          this.log('set response body', this.response)\n\n          if (mockedResponse.body && this.response) {\n            this.setReadyState(this.LOADING)\n\n            // Presense of the mocked response implies a response body (not null).\n            // Presense of the coerced `this.response` implies the mocked body is valid.\n            const bodyBuffer = bufferFrom(mockedResponse.body)\n\n            // Trigger a progress event based on the mocked response body.\n            this.trigger('progress', {\n              loaded: bodyBuffer.length,\n              total: bodyBuffer.length,\n            })\n          }\n\n          /**\n           * Explicitly mark the request as done so its response never hangs.\n           * @see https://github.com/mswjs/interceptors/issues/13\n           */\n          this.setReadyState(this.DONE)\n\n          // Trigger a load event to indicate the fetch has succeeded.\n          this.trigger('load')\n          // Trigger a loadend event to indicate the fetch has completed.\n          this.trigger('loadend')\n\n          emitter.emit(\n            'response',\n            isomorphicRequest,\n            toIsoResponse(mockedResponse)\n          )\n        } else {\n          this.log('no mocked response received!')\n\n          // Perform an original request, when the request middleware returned no mocked response.\n          const originalRequest = new XMLHttpRequest()\n\n          this.log('opening an original request %s %s', this.method, this.url)\n          originalRequest.open(\n            this.method,\n            this.url,\n            this.async ?? true,\n            this.user,\n            this.password\n          )\n\n          // Reflect a successful state of the original request\n          // on the patched instance.\n          originalRequest.addEventListener('load', () => {\n            this.log('original \"onload\"')\n\n            this.status = originalRequest.status\n            this.statusText = originalRequest.statusText\n            this.responseURL = originalRequest.responseURL\n            this.responseType = originalRequest.responseType\n            this.response = originalRequest.response\n            this.responseText = originalRequest.responseText\n            this.responseXML = originalRequest.responseXML\n\n            this.log('set mock request readyState to DONE')\n\n            // Explicitly mark the mocked request instance as done\n            // so the response never hangs.\n            /**\n             * @note `readystatechange` listener is called TWICE\n             * in the case of unhandled request.\n             */\n            this.setReadyState(this.DONE)\n\n            this.log('received original response', this.status, this.statusText)\n            this.log('original response body:', this.response)\n\n            const responseHeaders = originalRequest.getAllResponseHeaders()\n            this.log('original response headers:\\n', responseHeaders)\n\n            this._responseHeaders = stringToHeaders(responseHeaders)\n            this.log(\n              'original response headers (normalized)',\n              this._responseHeaders\n            )\n\n            this.log('original response finished')\n\n            emitter.emit('response', isomorphicRequest, {\n              status: originalRequest.status,\n              statusText: originalRequest.statusText,\n              headers: this._responseHeaders,\n              body: originalRequest.response,\n            })\n          })\n\n          // Assign callbacks and event listeners from the intercepted XHR instance\n          // to the original XHR instance.\n          this.propagateCallbacks(originalRequest)\n          this.propagateListeners(originalRequest)\n          this.propagateHeaders(originalRequest, this._requestHeaders)\n\n          if (this.async) {\n            originalRequest.timeout = this.timeout\n          }\n\n          this.log('send', this.data)\n          originalRequest.send(this.data)\n        }\n      })\n    }\n\n    public abort() {\n      this.log('abort')\n\n      if (this.readyState > this.UNSENT && this.readyState < this.DONE) {\n        this.setReadyState(this.UNSENT)\n        this.trigger('abort')\n      }\n    }\n\n    dispatchEvent() {\n      return false\n    }\n\n    public setRequestHeader(name: string, value: string) {\n      this.log('set request header \"%s\" to \"%s\"', name, value)\n      this._requestHeaders.append(name, value)\n    }\n\n    public getResponseHeader(name: string): string | null {\n      this.log('get response header \"%s\"', name)\n\n      if (this.readyState < this.HEADERS_RECEIVED) {\n        this.log(\n          'cannot return a header: headers not received (state: %s)',\n          this.readyState\n        )\n        return null\n      }\n\n      const headerValue = this._responseHeaders.get(name)\n\n      this.log(\n        'resolved response header \"%s\" to \"%s\"',\n        name,\n        headerValue,\n        this._responseHeaders\n      )\n\n      return headerValue\n    }\n\n    public getAllResponseHeaders(): string {\n      this.log('get all response headers')\n\n      if (this.readyState < this.HEADERS_RECEIVED) {\n        this.log(\n          'cannot return headers: headers not received (state: %s)',\n          this.readyState\n        )\n        return ''\n      }\n\n      return headersToString(this._responseHeaders)\n    }\n\n    public addEventListener<\n      K extends keyof InternalXMLHttpRequestEventTargetEventMap\n    >(name: K, listener: XMLHttpRequestEventHandler) {\n      this.log('addEventListener', name, listener)\n      this._events.push({\n        name,\n        listener,\n      })\n    }\n\n    public removeEventListener<K extends keyof XMLHttpRequestEventMap>(\n      name: K,\n      listener: (event?: XMLHttpRequestEventMap[K]) => void\n    ): void {\n      this.log('removeEventListener', name, listener)\n      this._events = this._events.filter((storedEvent) => {\n        return storedEvent.name !== name && storedEvent.listener !== listener\n      })\n    }\n\n    public overrideMimeType() {}\n\n    /**\n     * Resolves the response based on the `responseType` value.\n     */\n    getResponseBody(body: string | undefined) {\n      // Handle an improperly set \"null\" value of the mocked response body.\n      const textBody = body ?? ''\n      this.log('coerced response body to', textBody)\n\n      switch (this.responseType) {\n        case 'json': {\n          this.log('resolving response body as JSON')\n          return parseJson(textBody)\n        }\n\n        case 'blob': {\n          const blobType =\n            this.getResponseHeader('content-type') || 'text/plain'\n          this.log('resolving response body as Blob', { type: blobType })\n\n          return new Blob([textBody], {\n            type: blobType,\n          })\n        }\n\n        case 'arraybuffer': {\n          this.log('resolving response body as ArrayBuffer')\n          const arrayBuffer = bufferFrom(textBody)\n          return arrayBuffer\n        }\n\n        default:\n          return textBody\n      }\n    }\n\n    getResponseXML() {\n      const contentType = this.getResponseHeader('Content-Type')\n      if (contentType === 'application/xml' || contentType === 'text/xml') {\n        return new DOMParser().parseFromString(this.responseText, contentType)\n      }\n      return null\n    }\n\n    /**\n     * Propagates mock XMLHttpRequest instance callbacks\n     * to the given XMLHttpRequest instance.\n     */\n    propagateCallbacks(request: XMLHttpRequest) {\n      this.log('propagating request callbacks to the original request')\n      const callbackNames: Array<ExtractCallbacks<keyof XMLHttpRequest>> = [\n        'abort',\n        'onerror',\n        'ontimeout',\n        'onload',\n        'onloadstart',\n        'onloadend',\n        'onprogress',\n        'onreadystatechange',\n      ]\n\n      for (const callbackName of callbackNames) {\n        const callback = this[callbackName]\n\n        if (callback) {\n          request[callbackName] = this[callbackName] as any\n\n          this.log('propagated the \"%s\" callback', callbackName, callback)\n        }\n      }\n\n      request.onabort = this.abort\n      request.onerror = this.onerror\n      request.ontimeout = this.ontimeout\n      request.onload = this.onload\n      request.onloadstart = this.onloadstart\n      request.onloadend = this.onloadend\n      request.onprogress = this.onprogress\n      request.onreadystatechange = this.onreadystatechange\n    }\n\n    /**\n     * Propagates the mock XMLHttpRequest instance listeners\n     * to the given XMLHttpRequest instance.\n     */\n    propagateListeners(request: XMLHttpRequest) {\n      this.log(\n        'propagating request listeners (%d) to the original request',\n        this._events.length,\n        this._events\n      )\n\n      this._events.forEach(({ name, listener }) => {\n        request.addEventListener(name, listener)\n      })\n    }\n\n    propagateHeaders(request: XMLHttpRequest, headers: Headers) {\n      this.log('propagating request headers to the original request', headers)\n\n      // Preserve the request headers casing.\n      Object.entries(headers.raw()).forEach(([name, value]) => {\n        this.log(\n          'setting \"%s\" (%s) header on the original request',\n          name,\n          value\n        )\n        request.setRequestHeader(name, value)\n      })\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"script"}