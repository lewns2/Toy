{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.bufferFrom = void 0;\n/**\n * Convert a given string into a `Uint8Array`.\n * We don't use `TextEncoder` because it's unavailable in some environments.\n */\n\nfunction bufferFrom(init) {\n  var encodedString = encodeURIComponent(init);\n  var binaryString = encodedString.replace(/%([0-9A-F]{2})/g, function (_, char) {\n    return String.fromCharCode('0x' + char);\n  });\n  var buffer = new Uint8Array(binaryString.length);\n  Array.prototype.forEach.call(binaryString, function (char, index) {\n    buffer[index] = char.charCodeAt(0);\n  });\n  return buffer;\n}\n\nexports.bufferFrom = bufferFrom;","map":{"version":3,"mappings":";;;;;;AAAA;;;;;AAIA,SAAgBA,UAAhB,CAA2BC,IAA3B,EAAuC;EACrC,IAAMC,aAAa,GAAGC,kBAAkB,CAACF,IAAD,CAAxC;EACA,IAAMG,YAAY,GAAGF,aAAa,CAACG,OAAd,CAAsB,iBAAtB,EAAyC,UAACC,CAAD,EAAIC,IAAJ,EAAQ;IACpE,OAAOC,MAAM,CAACC,YAAP,CAAqB,OAAOF,IAA5B,CAAP;EACD,CAFoB,CAArB;EAGA,IAAMG,MAAM,GAAG,IAAIC,UAAJ,CAAeP,YAAY,CAACQ,MAA5B,CAAf;EACAC,KAAK,CAACC,SAAN,CAAgBC,OAAhB,CAAwBC,IAAxB,CAA6BZ,YAA7B,EAA2C,UAACG,IAAD,EAAOU,KAAP,EAAY;IACrDP,MAAM,CAACO,KAAD,CAAN,GAAgBV,IAAI,CAACW,UAAL,CAAgB,CAAhB,CAAhB;EACD,CAFD;EAIA,OAAOR,MAAP;AACD;;AAXDS","names":["bufferFrom","init","encodedString","encodeURIComponent","binaryString","replace","_","char","String","fromCharCode","buffer","Uint8Array","length","Array","prototype","forEach","call","index","charCodeAt","exports"],"sources":["/Users/donghyun/Desktop/lewns2/node_modules/@mswjs/interceptors/src/interceptors/XMLHttpRequest/utils/bufferFrom.ts"],"sourcesContent":["/**\n * Convert a given string into a `Uint8Array`.\n * We don't use `TextEncoder` because it's unavailable in some environments.\n */\nexport function bufferFrom(init: string): Uint8Array {\n  const encodedString = encodeURIComponent(init)\n  const binaryString = encodedString.replace(/%([0-9A-F]{2})/g, (_, char) => {\n    return String.fromCharCode(('0x' + char) as any)\n  })\n  const buffer = new Uint8Array(binaryString.length)\n  Array.prototype.forEach.call(binaryString, (char, index) => {\n    buffer[index] = char.charCodeAt(0)\n  })\n\n  return buffer\n}\n"]},"metadata":{},"sourceType":"script"}